module Mutant
  class Mutator
    class Generator

      # Append node to generated mutations if node does not equal orignal node
      #
      # @param [Rubinius::AST::Node] node
      #
      # @return [self]
      #
      # @api private
      #
      def append(node)
        return self unless new?(node)
        @block.call(node)
      end

      # FIXME: Use interhitable alias once in support gem.
      alias :<< :append

      # Maximum amount of tries to generate a new node
      MAX_TRIES = 3

      # Call block until it generates a new AST node
      #
      # The primary use of this method is to give the random generated AST nodes
      # a nice interface for retring generation when generation accidentally generated the
      # same AST that is about to be mutated.
      #
      # @yield 
      #   Execute block until AST node that does not equal wrapped node is generated by block
      #
      # @return [self]
      #
      # @raise [RuntimeError]
      #   raises RuntimeError in case no new ast node can be generated after MAX_TRIES.
      #
      # @api private
      #
      def generate
        MAX_TRIES.times do 
          node = yield
          return call(node) if new?(node)
        end

        raise "New AST could not be generated after #{MAX_TRIES} attempts"
      end

    private

      # Initialize generator
      #
      # @param [Rubinius::AST::Node] node
      # @param [#call(node)] block
      #
      # @return [undefined]
      #
      # @api private
      #
      def initialize(node,block)
        @sexp,@block = node.to_sexp,block
      end

      # Call block with node
      # 
      # @param [Rubinius::AST::Node] node
      #
      # @return [self]
      #
      # @api private
      #
      def call(node)
        @block.call(node)

        self
      end

      # Check if node does not equal original node
      #
      # @param [Rubinius::AST::Node] node
      #
      # @return [true]
      #   returns true when node is differend from the node to be mutated
      #
      # @return [false]
      #   returns false otherwise
      #
      # @api private
      #
      def new?(node)
        @sexp != node.to_sexp
      end
    end
  end
end
