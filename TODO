* Test mutant with mutant.
  This is interesting IMHO mutant should have another entry point
  that does not create the ::Mutant namespace, ideas:
  * ::Zombie namespace can be created with dynamically creating a 
    new library under a different load path. 
  * This second entry point should NOT be a plain namespace alias, a full 
    copy of the library so the mutator does not mutate itself.
  * Maybe the full clone could be generated by evaluating the full mutant ast
    a second time with a differend module name ast node.
* Allow matches on attr_reader with literal name argument(s)?
* Allow matches on define_method with literal name argument?
* Make sure file is set in generated ASTs. Has a stupid default currently.
* Remove duplicated code in Mutant::Mutator::*
* Add some kind of a "do not touch me object" that raises on all messages.
  It can be used to make sure each literal value is touched.
* Replace nil or add "do not touch me object" to literal mutations.
* Add support remaining dynamic literals
* Mutate options on Regexp literals
* Use inheritable alias once (virtus,veritas,mapper,session, ...) support gem is born.
* Mutations on Rubinius::AST::Self?
* Support the numerous Rubinius::AST::SendWithArguments mutations.
* Fix rubinius to allow setting @vcall_style variable in Rubinius::AST::Send nodes.
* Add mutations on the conditiosn of case statements. (Rubinius::AST::When)
